(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{341:function(t,s,a){t.exports=a.p+"assets/img/state.8faaaf8b.jpg"},496:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"자바-스터디-10주차"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#자바-스터디-10주차"}},[t._v("#")]),t._v(" 자바 스터디 - 10주차")]),t._v(" "),s("h2",{attrs:{id:"thread-클래스와-runnable-인터페이스"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#thread-클래스와-runnable-인터페이스"}},[t._v("#")]),t._v(" Thread 클래스와 Runnable 인터페이스")]),t._v(" "),s("p",[t._v("프로세스: 프로그램의 실행 단위"),s("br"),t._v("\n스레드: 작업을 실행하는 단위, 자바에서는 JVM에 의해서 관리됨.")]),t._v(" "),s("p",[t._v("프로세스에는 적어도 한개 이상의 스레드가 있으며, "),s("strong",[t._v("Main 스레드 하나로 시작하여 스레드를 추가 생성하면 멀티 스레드 환경이 됨.")]),s("br"),t._v("\n스레드는 프로세스의 리소스를 공유하기 때문에 효율적이지만 잠재적인 문제점에 노출될 수 있음.\n==> 왜 공유되느냐? resource allocation의 단위는 프로세스이기 때문.")]),t._v(" "),s("p",[t._v("이런 기능을 수행할 수 있도록 하는 것: "),s("strong",[t._v("자바의 Thread 클래스")]),t._v("와 "),s("strong",[t._v("Runnable 인터페이스")])]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("자바의 Thread 클래스")]),s("br"),t._v("\n스레드를 구현하는 자바의 클래스."),s("br"),t._v("\n쿨래스를 이용해 스레드를 생성하고, 스레드를 만들 때는 일반적으로 실행할 코드를 Runnable 객체로 전달함.")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Runnable 인터페이스")]),s("br"),t._v("\n자바에서 다중 스레드를 구현하기 위한 인터페이스."),s("br"),t._v("\nRunnable을 구현한 객체는 스레드 생성 시에 생성자에 저장하거나,"),s("br"),t._v("\nThread 클래스의 run 메서드를 오버라이드 하여 실행 가능한 코드를 정의할 수 있음.")])])]),t._v(" "),s("h2",{attrs:{id:"스레드-구현-방법"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#스레드-구현-방법"}},[t._v("#")]),t._v(" 스레드 구현 방법")]),t._v(" "),s("ol",[s("li",[t._v("Thread 클래스를 상속받아 구현")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Thread 클래스 상속")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//run 메소드 오버라이딩")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyThread is running "')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//MyThread is running")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("Runnable 인터페이스를 구현하여 스레드의 인자로 전달")])]),t._v(" "),s("p",[s("code",[t._v("Thread(Runnable target)")]),t._v(" : Runnable target이 구현된 스레드 객체 할당")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyRunnable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyRunnable is running"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//인터페이스 레퍼런스를 이용해 구현체를 사용함")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//MyRunnable ")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyRunnable")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyRunnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyRunnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//MyRunnable is running")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("br"),t._v(" "),s("p",[t._v("Q: 돌고 돌아 결국에는 스레드 클래스를 이용해서 사용하는 것이 아닌가?"),s("br"),t._v("\nA: 대신에 Runnable 인터페이스를 이용하면 스레드를 사용할 수 있을 뿐만 아니라 상속 또한 이용할 수 있음. 스레드 클래스를 이용하여 구현할 경우에는 다중 상속이 불가능하여서 상속받기 어려움.")]),t._v(" "),s("h2",{attrs:{id:"thread-생성자와-메소드"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#thread-생성자와-메소드"}},[t._v("#")]),t._v(" Thread 생성자와 메소드")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Thread 생성자")])])]),t._v(" "),s("p",[s("code",[t._v("Thread( )")]),t._v(" : 새로운 스레드 객체 할당"),s("br"),t._v(" "),s("code",[t._v("Thread(String name)")]),t._v(" : 새로운 스레드 객체가 할당되며, 스레드 이름은 name으로 설정됨"),s("br"),t._v(" "),s("code",[t._v("Thread(Runnable target)")]),t._v(" : Runnable target이 구현된 스레드 객체 할당"),s("br"),t._v(" "),s("code",[t._v("Thread(Runnable target, String name)")]),t._v(" : Runnable target이 구현된 스레드 객체가 할당되면 스레드 이름은 name으로 설정됨.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Thread 메소드")])])]),t._v(" "),s("p",[s("code",[t._v("void run( )")]),t._v(" : 스레드의 실행코드가 작성되는 메소드로 사용자는 run() 메소드를 오버라이드 하여 사용해야 함"),s("br"),t._v(" "),s("code",[t._v("void start( )")]),t._v(" : 스레드가 시작되도록 요청하는 메소드로 JVM은 해당 스레드의 run() 메소드를 호출"),s("br"),t._v(" "),s("br")]),t._v(" "),s("p",[s("code",[t._v("void interrupt( )")]),t._v(" : 스레드를 중지 "),s("br"),t._v(" "),s("br")]),t._v(" "),s("p",[s("code",[t._v("void join( )")]),t._v(" : 이 스레드가 끝날때까지 기다림 "),s("br"),t._v(" "),s("code",[t._v("void join(long millis)")]),t._v(" : 최대 millis 시간동안 이 스레드가 끝날때까지 기다림"),s("br"),t._v(" "),s("br")]),t._v(" "),s("p",[s("code",[t._v("static void sleep(long millis)")]),t._v(" : millis 시간동안 현재 스레드를 일시중지시킴 "),s("br"),t._v(" "),s("code",[t._v("static void yield( )")]),t._v(" : 현재 스레드의 실행시간을 다른 스레드에게 양보 "),s("br"),t._v(" "),s("code",[t._v("static Thread currentThread( )")]),t._v(" : 현재 실행중인 스레드 객체의 참조값을 반환 "),s("br"),t._v(" "),s("br")]),t._v(" "),s("p",[s("code",[t._v("long getId( )")]),t._v(" : 스레드의 Id를 반환 "),s("br"),t._v(" "),s("code",[t._v("String getName( )")]),t._v(" : 스레드의 이름을 반환 "),s("br"),t._v(" "),s("code",[t._v("int getPriority( )")]),t._v(" : 스레드의 우선순위 값을 반환 (우선순위 범위 : 1 ~ 10)"),s("br"),t._v(" "),s("code",[t._v("Thread.State getState( )")]),t._v(" : 스레드의 state 값을 반환"),s("br"),t._v(" "),s("code",[t._v("ThreadGroup getThreadGroup( )")]),t._v(" : 스레드가 속한 스레드 그룹을 반환 "),s("br"),t._v(" "),s("code",[t._v("static boolean interrupted( )")]),t._v(" : 현재 스레드의 interrupted 여부를 반환 "),s("br"),t._v(" "),s("code",[t._v("boolean isInterrupted( )")]),t._v(" : 이 스레드의 interrupted 여부를 반환 "),s("br"),t._v(" "),s("code",[t._v("boolean isAlive( )")]),t._v(" : 이 스레드가 살아있는지 여부를 반환 "),s("br"),t._v(" "),s("code",[t._v("boolean isDaemon( )")]),t._v(" : 이 스레드가 데몬 스레드인지 여부를 반환 "),s("br"),t._v(" "),s("br")]),t._v(" "),s("p",[s("code",[t._v("void setDaemon(boolean on)")]),t._v(" : 이 스레드를 데몬 스레드로 변경  "),s("br"),t._v(" "),s("code",[t._v("void setName(String name)")]),t._v(" : 이 스레드의 이름을 name으로 변경 "),s("br"),t._v(" "),s("code",[t._v("void setPriority(int newPriority)")]),t._v(" : 이 스레드의 우선순위를 newPriority로 변경 "),s("br"),t._v(" "),s("code",[t._v("String toString( )")]),t._v(" : 이 스레드의 이름, 우선순위, 스레드그룹등의 정보를 담은 문자열을 반환")]),t._v(" "),s("h2",{attrs:{id:"쓰레드의-상태"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#쓰레드의-상태"}},[t._v("#")]),t._v(" 쓰레드의 상태")]),t._v(" "),s("p",[s("img",{attrs:{src:a(341),alt:""}})]),t._v(" "),s("p",[t._v("without timeout은 그냥 wait 콜을 받았을 때"),s("br"),t._v("\nblock이 unlock된 것은 IO 인터럽트가 발생한 것임")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("상태")]),t._v(" "),s("th",[t._v("열거 상수")]),t._v(" "),s("th",[t._v("설명")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("객체 생성")]),t._v(" "),s("td",[t._v("NEW")]),t._v(" "),s("td",[t._v("스레드 객체가 생성, 아직 start() 메소드가 호출되지 않은 상태")])]),t._v(" "),s("tr",[s("td",[t._v("실행 대기")]),t._v(" "),s("td",[t._v("RUNNABLE")]),t._v(" "),s("td",[t._v("실행 상태로 언제든지 갈 수 있는 상태")])]),t._v(" "),s("tr",[s("td",[t._v("일시 정지")]),t._v(" "),s("td",[t._v("WAITING")]),t._v(" "),s("td",[t._v("다른 스레드가 통지할 때까지 기다리는 상태")])]),t._v(" "),s("tr",[s("td",[t._v("-")]),t._v(" "),s("td",[t._v("TIME_WAITING")]),t._v(" "),s("td",[t._v("주어진 시간동안 기다리는 상태")])]),t._v(" "),s("tr",[s("td",[t._v("-")]),t._v(" "),s("td",[t._v("BLOCKED")]),t._v(" "),s("td",[t._v("사용하고자 하는 객체의 락이 풀릴 때까지 기다리는 상태")])]),t._v(" "),s("tr",[s("td",[t._v("종료")]),t._v(" "),s("td",[t._v("TERMINATED")]),t._v(" "),s("td",[t._v("실행을 마친 상태")])])])]),t._v(" "),s("br"),t._v(" "),s("p",[s("code",[t._v("Thread.State getState( )")]),t._v(" : 스레드의 state 값을 반환"),s("br"),t._v("\n위 함수를 이용하여 스레드의 상태를 얻을 수 있음.")]),t._v(" "),s("h2",{attrs:{id:"쓰레드의-우선순위"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#쓰레드의-우선순위"}},[t._v("#")]),t._v(" 쓰레드의 우선순위")]),t._v(" "),s("p",[t._v("2개 이상의 스레드가 동작중일 때 우선 순위를 부여하여 우선 순위가 높은 스레드에게 실행의 우선권을 부여할 수 있음."),s("br"),t._v("\n우선 순위를 지정하기 위한 상수를 지정함")]),t._v(" "),s("p",[t._v("MAX_PRIORITY, MIN_PRIORITY, NORM_PRIORITY => MAX는 10, MIN은 1, NORM은 5(기본값)"),s("br"),t._v("\nsetPriority 함수로 스레드의 우선순위를 변경할 수 있음.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("JVM의 스케쥴링 규칙")])])]),t._v(" "),s("p",[t._v("철저한 우선 순위 기반"),s("br"),t._v("\n가장 높은 우선 순위의 스레드가 우선적으로 스케쥴링"),s("br"),t._v("\n동일한 우선 순위의 스레드는 돌아가면서 스케쥴링(Round-Robin)"),s("br"),t._v("\nRound-Robin은 timeout을 이용해 번갈아서 실행되는 알고리즘")]),t._v(" "),s("h2",{attrs:{id:"main-쓰레드"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#main-쓰레드"}},[t._v("#")]),t._v(" Main 쓰레드")]),t._v(" "),s("p",[t._v("자바 프로그램의 시작과 동시에 하나의 스레드가 즉시 동작하게 됨."),s("br"),t._v("\n이를 메인 스레드라고 부름."),s("br"),t._v("\n메인 스레드 실행중일 때 Thread.currentThread()로 현재 실행중인 스레드(메인 스레드)로 참조값(레퍼런스)를 얻을 수 있음.")]),t._v(" "),s("h2",{attrs:{id:"동기화"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#동기화"}},[t._v("#")]),t._v(" 동기화")]),t._v(" "),s("p",[t._v("프로세스의 자원을 공유해서 사용하기 때문에 공유 자원을 동시에 수정하여 잘못된 값을 얻지 않도록 해야 함 => 동기화 필요")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://velog.io/@jjbin/%EC%9E%90%EB%B0%94-%EB%8F%99%EA%B8%B0%ED%99%94-Java-Synchronization",target:"_blank",rel:"noopener noreferrer"}},[t._v("동기화를 위한 자바 툴 참고자료"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"데드락"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#데드락"}},[t._v("#")]),t._v(" 데드락")]),t._v(" "),s("p",[t._v("프로그램은 실행되고 있는데 정작 아무런 작업도 하지 않는 상태"),s("br"),t._v("\n예를 들어 메인 스레드에서 자식 스레드가 종료될 때까지 대기시켰는데 (Thread.currentThread().join()) 자식 스레드가 없을 경우 데드락이 발생함.")]),t._v(" "),s("br"),t._v(" "),s("ul",[s("li",[s("strong",[t._v("데드락의 발생 조건")])])]),t._v(" "),s("p",[s("strong",[t._v("상호 배제 (Mutual Exclusion)")]),t._v(" : 한 자원에 대해 여러 쓰레드 동시 접근 불가"),s("br"),t._v(" "),s("strong",[t._v("점유와 대기 (Hold and Wait)")]),t._v(" : 자원을 가지고 있는 상태에서 다른 쓰레드가 사용하고 있는 자원 반납을 기다리는 것"),s("br"),t._v(" "),s("strong",[t._v("비선점 (Non Preemptive)")]),t._v(" : 다른 쓰레드의 자원을 실행 중간에 강제로 가져올 수 없음"),s("br"),t._v(" "),s("strong",[t._v("환형대기 (Circle Wait)")]),t._v(" : 각 쓰레드가 순환적으로 다음 쓰레드가 요구하는 자원을 가지고 있는 것")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Main")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" object1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" object2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FirstThread")]),t._v(" thread1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FirstThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SecondThread")]),t._v(" thread2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SecondThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        thread1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        thread2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FirstThread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//synchronized를 이용하여 object1과 object2가 동시에 쓰레드를 사용할 수 없게 만듦")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//object1의 락을 가짐")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"First Thread has object1\'s lock"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//스레드 10ms간 대기")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"First Thread want to have object2\'s lock. so wait"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//object1의 락을 가진 상태로 object2의 락을 가지길 원함")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"First Thread has object2\'s lock too"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SecondThread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//synchronized를 이용하여 object1과 object2가 동시에 쓰레드를 사용할 수 없게 만듦")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Second Thread has object2\'s lock"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//스레드 10ms간 대기")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Second Thread want to have object1\'s lock, so wait"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n                 "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//object2의 락을 가진 상태로 object1의 락을 가지길 원함")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Second Thread has object1\'s lock too"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);